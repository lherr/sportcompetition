Virtual Environment installieren:
sudo apt install python3-venv

Virtuelle Umgebung erzeugen:
python3 -m venv myvenv

Virtuelle Umgebung betreten:
source myvenv/bin/activate

Virtuelle Umgebung verlassen:
deactivate

Django in virtueller umgebung installieren:
python -m pip install --upgrade pip
requirements.txt mit Inhalt "Django~=3.2.11" anlegen
pip install -r requirements.txt

Git installieren:
sudo apt install git

In virtueller Umgebung Djangoprojekt anlegen:
django-admin startproject mysite .

Settings anpassen:
-> mysite/settings.py
TIME_ZONE = 'Europe/Berlin'
LANGUAGE_CODE = 'de-de'
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
STATIC_ROOT = os.path.join(BASE_DIR, 'static') (Djangogirls)


Datenbank erstellen:
python manage.py migrate

Webserver starten:
python manage.py runserver
Server läuft auf: http://localhost:8000/

Applikation für den Blog starten
python manage.py startapp blog

Eintrag in mysite/settings.py:
INSTALLED_APPS = [
    ...
    'blog.apps.BlogConfig',
]

Inhalt der Datei blog/models.py löschen und folgendes eintragen:
from django.conf import settings
from django.db import models
from django.utils import timezone


class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(default=timezone.now)
    published_date = models.DateTimeField(blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title

Model in Datenbank anlegen:
python manage.py makemigrations blog



blog/admin.py ändern:

from django.contrib import admin
from .models import Post

admin.site.register(Post)



Superuser erstellen:
python manage.py migrate
python manage.py createsuperuser


Adminseite aufrufen und anmelden:
python manage.py runserver
http://127.0.0.1:8000/admin/

Einige Posts anlegen!


Git Repository in Verzeichnis Djangogirls anlegen:
$ git init
Initialized empty Git repository in ~/djangogirls/.git/
$ git config --global user.name "Dein Name"
$ git config --global user.email du@example.com


.gitignore anlegen:
# Python
*.pyc
*~
__pycache__

# Env
.env
myvenv/
venv/

# Datenbank
db.sqlite3

# Static Ordner im Projektverzeichnis
/static/

# macOS
._*
.DS_Store
.fseventsd
.Spotlight-V100

# Windows
Thumbs.db*
ehthumbs*.db
[Dd]esktop.ini
$RECYCLE.BIN/

# Visual Studio
.vscode/
.history/
*.code-workspace



Git testen:
$ git status


Hinzufügen und Committen:
$ git add .
$ git commit -m "Meine Django-Girls-App, erster Commit"



Github Account und Repository anlegen:
https://github.com/


Quelltext in Repository hochladen:
git branch -M main
git remote add origin https://github.com/<your-github-username>/djangogirls.git
git push -u origin main


(Python Anywhere)


Django URLs mysite/urls.py 
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
]


Leere Datei urls.py in blog:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.post_list, name='post_list'),
]


Django-Views 
Datei blog/views.py

from django.shortcuts import render

# Create your views here.

def post_list(request):
    return render(request, 'blog/post_list.html', {})


Templates
blog/templates/blog -> Datei post_list.html

<!DOCTYPE html>
 
<html lang="de">
  <head>
    <meta charset="utf-8">
    <title>Django-Girls</title>
  </head>
  <body>
    <p>Halli-Hallo!</p>
    <p>Es funktioniert!</p>
  </body>
</html>

python manage.py runserver


Committen:
git status
git add .
git status
git commit -m "HTML der Site geändert."
git push



Dynamische Daten in Templates:

Datei blog/views.py

from django.shortcuts import render
from django.utils import timezone
from .models import Post

def post_list(request):
    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
    return render(request, 'blog/post_list.html', {'posts': posts})



Templates anpassen:

Datei blog/templatest/blog/post_list.html ergänzen:

<header>
    <h1><a href="/">Django Girls Blog</a></h1>
</header>

{% for post in posts %}
    <article>
        <time>published: {{ post.published_date }}</time>
        <h2><a href="">{{ post.title }}</a></h2>
        <p>{{ post.text|linebreaksbr }}</p>
    </article>
{% endfor %}


Comitten:

$ git status
[...]
$ git add .
$ git status
[...]
$ git commit -m "Modified templates to display posts from database."
[...]
$ git push


CSS - Bootstrap

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

in head von blog/templates/blog/post_list.html einfügen



CSS - Datei erstellen:
djangogirls
└─── blog
     └─── static
          └─── css
               └─── blog.css


h1 a, h2 a {
    color: #C25100;
}

body {
    padding-left: 15px;
}

Template anpassen:

{% load static %}
<!DOCTYPE html>
<html>
    <head>
        <title>Django Girls blog</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
        <link rel="stylesheet" href="{% static 'css/blog.css' %}">
    </head>
    <body>
        <header>
            <h1><a href="/">Django Girls Blog</a></h1>
        </header>

        {% for post in posts %}
            <article>
                <time>published: {{ post.published_date }}</time>
                <h2><a href="">{{ post.title }}</a></h2>
                <p>{{ post.text|linebreaksbr }}</p>
            </article>
        {% endfor %}
    </body>
</html>


Template erweitern

blog
└───templates
    └───blog
            base.html
            post_list.html

